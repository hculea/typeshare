"""
 Generated by typeshare 1.11.0
"""
from __future__ import annotations

from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Literal, Union


class AutofilledByUs(BaseModel):
    """
    Generated type representing the anonymous struct variant `Us` of the `AutofilledBy` Rust enum
    """
    uuid: str
    """
    The UUID for the fill
    """


class AutofilledBySomethingElse(BaseModel):
    """
    Generated type representing the anonymous struct variant `SomethingElse` of the `AutofilledBy` Rust enum
    """
    uuid: str
    """
    The UUID for the fill
    """
    thing: int
    """
    Some other thing
    """


class AutofilledByTypes(str, Enum):
    US = "Us"
    SOMETHING_ELSE = "SomethingElse"

class AutofilledBy(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    type: AutofilledByTypes
    content: Union[AutofilledByUs, AutofilledBySomethingElse]


    @classmethod
    def Us(cls, uuid: str):
        return cls(
    type=AutofilledByTypes.US,
    content=AutofilledByUs(uuid = uuid)
	    )



    @classmethod
    def SomethingElse(cls, uuid: str, thing: int):
        return cls(
    type=AutofilledByTypes.SOMETHING_ELSE,
    content=AutofilledBySomethingElse(uuid = uuid, thing = thing)
	    )

class EnumWithManyVariantsAnonVariant(BaseModel):
    """
    Generated type representing the anonymous struct variant `AnonVariant` of the `EnumWithManyVariants` Rust enum
    """
    uuid: str


class EnumWithManyVariantsAnotherAnonVariant(BaseModel):
    """
    Generated type representing the anonymous struct variant `AnotherAnonVariant` of the `EnumWithManyVariants` Rust enum
    """
    uuid: str
    thing: int


class EnumWithManyVariantsTypes(str, Enum):
    UNIT_VARIANT = "UnitVariant"
    TUPLE_VARIANT_STRING = "TupleVariantString"
    ANON_VARIANT = "AnonVariant"
    TUPLE_VARIANT_INT = "TupleVariantInt"
    ANOTHER_UNIT_VARIANT = "AnotherUnitVariant"
    ANOTHER_ANON_VARIANT = "AnotherAnonVariant"

class EnumWithManyVariantsUnitVariant(BaseModel):
    content = Literal["UnitVariant"]

class EnumWithManyVariantsTupleVariantString(BaseModel):
    content: str

class EnumWithManyVariantsTupleVariantInt(BaseModel):
    content: int

class EnumWithManyVariantsAnotherUnitVariant(BaseModel):
    content = Literal["AnotherUnitVariant"]

class EnumWithManyVariants(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    type: EnumWithManyVariantsTypes
    content: Union[EnumWithManyVariantsUnitVariant, EnumWithManyVariantsTupleVariantString, EnumWithManyVariantsAnonVariant, EnumWithManyVariantsTupleVariantInt, EnumWithManyVariantsAnotherUnitVariant, EnumWithManyVariantsAnotherAnonVariant]


    @classmethod
    def AnonVariant(cls, uuid: str):
        return cls(
    type=EnumWithManyVariantsTypes.ANON_VARIANT,
    content=EnumWithManyVariantsAnonVariant(uuid = uuid)
	    )



    @classmethod
    def AnotherAnonVariant(cls, uuid: str, thing: int):
        return cls(
    type=EnumWithManyVariantsTypes.ANOTHER_ANON_VARIANT,
    content=EnumWithManyVariantsAnotherAnonVariant(uuid = uuid, thing = thing)
	    )

