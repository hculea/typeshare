"""
 Generated by typeshare 1.11.0
"""
from __future__ import annotations

from enum import Enum
from pydantic import BaseModel, ConfigDict
from pydantic.generics import GenericModel
from typing import Generic, List, Literal, TypeVar, Union

A = TypeVar("A")
B = TypeVar("B")
T = TypeVar("T")


class GenericStruct(GenericModel, Generic[A, B]):
    field_a: A
    field_b: List[B]


class GenericStructUsingGenericStruct(GenericModel, Generic[T]):
    struct_field: GenericStruct[str, T]
    second_struct_field: GenericStruct[T, str]
    third_struct_field: GenericStruct[T, List[T]]


class EnumUsingGenericStructTypes(str, Enum):
    VARIANT_A = "VariantA"
    VARIANT_B = "VariantB"
    VARIANT_C = "VariantC"
    VARIANT_D = "VariantD"

class EnumUsingGenericStructVariantA(BaseModel):
    content: GenericStruct[str, float]

class EnumUsingGenericStructVariantB(BaseModel):
    content: GenericStruct[str, int]

class EnumUsingGenericStructVariantC(BaseModel):
    content: GenericStruct[str, bool]

class EnumUsingGenericStructVariantD(BaseModel):
    content: GenericStructUsingGenericStruct[None]

class EnumUsingGenericStruct(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    type: EnumUsingGenericStructTypes
    content: Union[EnumUsingGenericStructVariantA, EnumUsingGenericStructVariantB, EnumUsingGenericStructVariantC, EnumUsingGenericStructVariantD]

    
    @classmethod
    def new_enum_using_generic_struct_variant_a(cls, content : EnumUsingGenericStructVariantA):
        return cls(
            type=EnumUsingGenericStructTypes.VARIANT_A,
            content=content
        )


    
    @classmethod
    def new_enum_using_generic_struct_variant_b(cls, content : EnumUsingGenericStructVariantB):
        return cls(
            type=EnumUsingGenericStructTypes.VARIANT_B,
            content=content
        )


    
    @classmethod
    def new_enum_using_generic_struct_variant_c(cls, content : EnumUsingGenericStructVariantC):
        return cls(
            type=EnumUsingGenericStructTypes.VARIANT_C,
            content=content
        )


    
    @classmethod
    def new_enum_using_generic_struct_variant_d(cls, content : EnumUsingGenericStructVariantD):
        return cls(
            type=EnumUsingGenericStructTypes.VARIANT_D,
            content=content
        )

