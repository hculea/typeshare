"""
 Generated by typeshare 1.11.0
"""
from __future__ import annotations

from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Literal, Union


class AddressDetails(BaseModel):
    pass

class AddressTypes(str, Enum):
    FIXED_ADDRESS = "FixedAddress"
    NO_FIXED_ADDRESS = "NoFixedAddress"

class AddressFixedAddress(BaseModel):
    content: AddressDetails

class AddressNoFixedAddress(BaseModel):
    content = Literal["NoFixedAddress"]

class Address(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    type: AddressTypes
    content: Union[AddressFixedAddress, AddressNoFixedAddress, None]


    @classmethod
    def new_address_fixed_address(cls, content : AddressFixedAddress):
        return cls(
            type=AddressTypes.FIXED_ADDRESS,
            content=content
        )


    @classmethod
    def new_address_no_fixed_address(cls) -> Address:
        return cls(
            type=AddressTypes.NO_FIXED_ADDRESS,
            content=None
	    )
