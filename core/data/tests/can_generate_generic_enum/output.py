"""
 Generated by typeshare 1.11.0
"""
from __future__ import annotations

from enum import Enum
from pydantic import BaseModel, ConfigDict
from pydantic.generics import GenericModel
from typing import Dict, Generic, List, Literal, TypeVar, Union

A = TypeVar("A")
B = TypeVar("B")
T = TypeVar("T")
U = TypeVar("U")


class GenericEnumTypes(str, Enum):
    VARIANT_A = "VariantA"
    VARIANT_B = "VariantB"

class GenericEnumVariantA(GenericModel, Generic[A]):
    content: A

class GenericEnumVariantB(GenericModel, Generic[B]):
    content: B

class GenericEnum(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    type: GenericEnumTypes
    content: Union[GenericEnumVariantA, GenericEnumVariantB]


    @classmethod
    def new_generic_enum_variant_a(cls, content : GenericEnumVariantA):
        return cls(
            type=GenericEnumTypes.VARIANT_A,
            content=content
        )


    @classmethod
    def new_generic_enum_variant_b(cls, content : GenericEnumVariantB):
        return cls(
            type=GenericEnumTypes.VARIANT_B,
            content=content
        )
class StructUsingGenericEnum(BaseModel):
    enum_field: GenericEnum[str, int]


class GenericEnumUsingGenericEnumTypes(str, Enum):
    VARIANT_C = "VariantC"
    VARIANT_D = "VariantD"
    VARIANT_E = "VariantE"

class GenericEnumUsingGenericEnumVariantC(GenericModel, Generic[T]):
    content: GenericEnum[T, T]

class GenericEnumUsingGenericEnumVariantD(GenericModel, Generic[T]):
    content: GenericEnum[str, Dict[str, T]]

class GenericEnumUsingGenericEnumVariantE(BaseModel):
    content: GenericEnum[str, int]

class GenericEnumUsingGenericEnum(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    type: GenericEnumUsingGenericEnumTypes
    content: Union[GenericEnumUsingGenericEnumVariantC, GenericEnumUsingGenericEnumVariantD, GenericEnumUsingGenericEnumVariantE]


    @classmethod
    def new_generic_enum_using_generic_enum_variant_c(cls, content : GenericEnumUsingGenericEnumVariantC):
        return cls(
            type=GenericEnumUsingGenericEnumTypes.VARIANT_C,
            content=content
        )


    @classmethod
    def new_generic_enum_using_generic_enum_variant_d(cls, content : GenericEnumUsingGenericEnumVariantD):
        return cls(
            type=GenericEnumUsingGenericEnumTypes.VARIANT_D,
            content=content
        )


    @classmethod
    def new_generic_enum_using_generic_enum_variant_e(cls, content : GenericEnumUsingGenericEnumVariantE):
        return cls(
            type=GenericEnumUsingGenericEnumTypes.VARIANT_E,
            content=content
        )
class GenericEnumsUsingStructVariantsVariantF(GenericModel, Generic[T]):
    """
    Generated type representing the anonymous struct variant `VariantF` of the `GenericEnumsUsingStructVariants` Rust enum
    """
    action: T


class GenericEnumsUsingStructVariantsVariantG(GenericModel, Generic[T, U]):
    """
    Generated type representing the anonymous struct variant `VariantG` of the `GenericEnumsUsingStructVariants` Rust enum
    """
    action: T
    response: U


class GenericEnumsUsingStructVariantsVariantH(BaseModel):
    """
    Generated type representing the anonymous struct variant `VariantH` of the `GenericEnumsUsingStructVariants` Rust enum
    """
    non_generic: int


class GenericEnumsUsingStructVariantsVariantI(GenericModel, Generic[T, U]):
    """
    Generated type representing the anonymous struct variant `VariantI` of the `GenericEnumsUsingStructVariants` Rust enum
    """
    vec: List[T]
    action: MyType[T, U]


class GenericEnumsUsingStructVariantsTypes(str, Enum):
    VARIANT_F = "VariantF"
    VARIANT_G = "VariantG"
    VARIANT_H = "VariantH"
    VARIANT_I = "VariantI"

class GenericEnumsUsingStructVariants(BaseModel):
    model_config = ConfigDict(use_enum_values=True)
    type: GenericEnumsUsingStructVariantsTypes
    content: Union[GenericEnumsUsingStructVariantsVariantF, GenericEnumsUsingStructVariantsVariantG, GenericEnumsUsingStructVariantsVariantH, GenericEnumsUsingStructVariantsVariantI]


    @classmethod
    def new_generic_enums_using_struct_variants_variant_f(cls, action: T):
        return cls(
            type=GenericEnumsUsingStructVariantsTypes.VARIANT_F,
            content=GenericEnumsUsingStructVariantsVariantF(action = action)
	    )


    @classmethod
    def new_generic_enums_using_struct_variants_variant_g(cls, action: T, response: U):
        return cls(
            type=GenericEnumsUsingStructVariantsTypes.VARIANT_G,
            content=GenericEnumsUsingStructVariantsVariantG(action = action, response = response)
	    )


    @classmethod
    def new_generic_enums_using_struct_variants_variant_h(cls, non_generic: int):
        return cls(
            type=GenericEnumsUsingStructVariantsTypes.VARIANT_H,
            content=GenericEnumsUsingStructVariantsVariantH(non_generic = non_generic)
	    )


    @classmethod
    def new_generic_enums_using_struct_variants_variant_i(cls, vec: List[T], action: MyType[T, U]):
        return cls(
            type=GenericEnumsUsingStructVariantsTypes.VARIANT_I,
            content=GenericEnumsUsingStructVariantsVariantI(vec = vec, action = action)
	    )
